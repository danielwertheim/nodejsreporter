var config = require('./config'),    fs = require('fs'),    handlebars = require('handlebars');var Report = function (issues) {    var now = new Date(),        mappedIssues = [];    for (var i = 0, l = issues.length; i < l; i++) {        mappedIssues.push(new Issue(issues[i]));    }    return {        createdISO: now.toISOString(),        createdFriendly: now.toLocaleString(),        issues: mappedIssues    };};var Issue = function (src) {    var issue = {            id: src.id        },        codeBlockRegEx = new RegExp(/\{code\}([\s\S]*?)\{code\}/gi);    var mapFieldToIssue = function (field) {        var name = field.name.toLowerCase().replace(' ', '');        issue[name] = field.value;        if (Array.isArray(field.value)) {            issue[name] = field.value[0];        }    };    for (var i = 0, l = src.field.length; i < l; i++) {        mapFieldToIssue(src.field[i]);    }    if (issue.description) {        issue.description = issue.description.replace(codeBlockRegEx, "$1");    }    return issue;};var writeFiles = function (html) {    fs.writeFile(config.paths.output + 'report.html', html, config.encoding);    fs.createReadStream(config.paths.resources + 'report-styling.css')        .pipe(fs.createWriteStream(config.paths.output + 'report-styling.css'));};var transformReport = function (report, onsuccess) {    fs.readFile(config.paths.resources + 'report-template.html', config.encoding, function (err, htmlTemplate) {        var template = handlebars.compile(htmlTemplate),            html = template(report);        onsuccess(html);    });};module.exports.write = function (json) {    var report = new Report(JSON.parse(json));    transformReport(report, writeFiles);};